import tkinter as tk
from tkinter import simpledialog
from docx import Document
from datetime import datetime
import openai
print(dir(openai))  # This will print all the top-level attributes for the openai module
# print(openai.Completion)  # This should not raise an AttributeError if the installation is correct
import os  # To access environment variable for API key

# Function to set up the OpenAI client
# (API Key should be set as an environment variable for security reasons)
def setup_openai_client():
    openai.api_key = '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'  # Replace 'your-api-key-here' with your actual OpenAI API key
    return openai



# Function to generate text for each section using OpenAI's API
def generate_text_for_section(openai_client, section_name, user_input):
    response = openai.completions.create(
        model="gpt-3.5-turbo-instruct",
        prompt=f"Write a concept paper for a project idea: '{concept_name}'. Description: {user_input}.",
        max_tokens=1000
    )
    return response.choices[0].text.strip()

# Create the main document structure
def create_document_structure(openai_client, document, structure, user_input):
    for section, subsections in structure.items():
        document.add_heading(section, level=1)
        if subsections:  # If there are subsections
            for subsection in subsections:
                document.add_heading(subsection, level=2)
                content = generate_text_for_section(openai_client, subsection, user_input)
                document.add_paragraph(content)
        else:  # If no subsections, generate content for the main section
            content = generate_text_for_section(openai_client, section, user_input)
            document.add_paragraph(content)

# Proceed with the script only if it's the main module
if __name__ == "__main__":
    # Initialize OpenAI API client
    client = setup_openai_client()
    
    # (rest of the code related to the GUI and document generation)
    
# Document structure based on the provided template
document_structure = {
    "1. Introduction": [
    "1.1. Concept Overview",
    "1.2. Purpose of the Concept Paper",
    "1.3. Scope of the Concept"
],
"2. Problem Statement": [
    "2.1. Identification of the Need",
    "2.2. Current Challenges and Limitations",
    "2.3. Anticipated Benefits",
    "2.4. Potential Impact and Justification"
],
"3. Objectives and Goals": [
    "3.1. Short-term Objectives",
    "3.2. Long-term Goals"
],
"4. Conceptual Framework": [
    "4.1. Theoretical Background",
    "4.2. Concept Proposition",
    "4.3. Framework and Methodologies"
],
"5. Preliminary Design and Features": [
    "5.1. Design Considerations",
    "5.2. Proposed Features",
    "5.3. Innovation and Relevance"
],
"6. Feasibility Analysis": [
    "6.1. Technical Feasibility",
    "6.2. Economic Feasibility",
    "6.3. Legal and Ethical Considerations"
],
"7. Methodology for Implementation": [
    "7.1. Proposed Plan for Development",
    "7.2. Timeline and Milestones"
],
"8. Evaluation and Assessment": [
    "8.1. Criteria for Success",
    "8.2. Risk Analysis",
    "8.3. Limitations of the Concept"
],
"9. Future Considerations": [
    "9.1. Scalability and Adaptability",
    "9.2. Future Research and Development"
],
"10. References and Citations": [
    "10.1. Bibliography",
    "10.2. Referenced Works"
],
"11. Appendices": [
    "11.1. Supplementary Materials",
    "11.2. Detailed Diagrams and Charts",
    "11.3. Extended Descriptions",
    "11.4. Related Documentation"
]

}

# Start GUI for input
root = tk.Tk()
root.withdraw()  # Hide the main window

# Ask the user what they would like to build
user_input = simpledialog.askstring("Input", "What project idea should the concept paper describe?")
concept_name = user_input

# Proceed only if user input is provided
if user_input:
    # Create a new Word document
    doc = Document()
    doc.add_heading('Concept Paper n', 0)

    # Add the user input as the introduction or overview
    doc.add_heading('Overview', level=1)
    doc.add_paragraph(user_input)

    # Generate and add other sections based on the structure
    create_document_structure(client, doc, document_structure, user_input)


# Before saving, print all paragraphs to the console for debugging
for paragraph in doc.paragraphs:
    timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
    filename = f'Concept_paper_{timestamp}.docx'
    doc.save(filename)
    print(f"The Concept Paper has been saved to '{filename}'.")
    root.destroy()

# Run the application
root.mainloop()
